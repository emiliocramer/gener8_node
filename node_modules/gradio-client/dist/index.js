"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GradioClient = void 0;
const ws_1 = __importDefault(require("ws"));
// eslint-disable-next-line @typescript-eslint/ban-types
class GradioClient {
    constructor(endpoint, options = {}) {
        this.endpoint = endpoint;
        this.options = options;
    }
    async request(i, ...args) {
        const ws = new ws_1.default(`${this.endpoint}/queue/join`);
        const timeout = this.options.timeout || 60000;
        const jobId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(36);
        return new Promise((resolve, reject) => {
            let resolved = false;
            const tmot = setTimeout(() => {
                ws.close();
                reject(new Error(`Timeout of ${timeout}ms exceeded`));
            }, timeout);
            ws.onopen = () => {
                // ws.send(JSON.stringify({ i, args }));
            };
            ws.onmessage = (e) => {
                const data = JSON.parse(e.data);
                const base = { fn_index: i, session_hash: jobId };
                switch (data.msg) {
                    case 'send_hash':
                        ws.send(JSON.stringify(base));
                        break;
                    case 'send_data':
                        ws.send(JSON.stringify({ ...base, event_data: null, data: args }));
                        break;
                    case 'process_completed':
                        clearTimeout(tmot);
                        resolved = true;
                        ws.close();
                        resolve(data.output.data);
                        break;
                }
            };
            ws.onerror = (e) => {
                clearTimeout(tmot);
                if (!resolved) {
                    reject(new Error(`WebSocket error: ${e.message}`));
                }
            };
            ws.onclose = (e) => {
                clearTimeout(tmot);
                if (!resolved) {
                    reject(new Error(`WebSocket closed unexpectedly: ${e.code} ${e.reason}`));
                }
            };
        });
    }
}
exports.GradioClient = GradioClient;
//# sourceMappingURL=index.js.map